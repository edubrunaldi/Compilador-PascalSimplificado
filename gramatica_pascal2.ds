<programa> ::= <beginProgram>
<beginProgram> ::= <header> <declSec> <block> [.]
<header> ::= [program] [ident] [;]
<block> ::= [begin] <statements> [end]
<declSec> ::= <typeDeclSec> <varDeclSec> <subProgramDecls>
<typeDeclSec> ::= [type] <typeDecls>
<typeDeclSec> ::= [Lambda]
<typeDecls> ::= <typeDecl> <more_typeDecls>
<more_typeDecls> ::= <typeDecl>
<more_typeDecls> ::= [Lambda]
<typeDecl> ::= <typeSpecification>
<typeSpecification> ::= <arraySpecification>
<typeSpecification> ::= <recordSpecification>
<arraySpecification> ::= [array] <dataType> [[] [numero_int] []] [;]
<recordSpecification> ::= [record] <varDecls> [end] [;]
<varDeclSec> ::= [var] [ident] <more_idents> [:] <dataType> [;] <more_varDecl>
<varDeclSec> ::= [Lambda]
<more_idents> ::= [,] [ident] <more_idents2>
<more_idents2> ::= <more_idents>
<more_idents2> ::= [Lambda]
<more_varDecl> ::= <varDeclSec>
<more_varDecl> ::= [Lambda]
<varDecls> ::= <varDecl> <more_varDecl>
<varDecl> ::= <dataType> <idList> [;]
<dataType> ::= [real]
<dataType> ::= [integer]
<dataType> ::= [ident]
<dataType> ::= [string]
<idList> ::= [ident] <more_idList>
<more_idList> ::= [,] <idList>
<more_idList> ::= [Lambda]
<subProgramDecls> ::= <subProgramDecl>
<subProgramDecls> ::= [Lambda]
<subProgramDecl> ::= <procDecl>
<subProgramDecl> ::= <functionDecl>
<procDecl> ::= <procHeader> <subProgramDeclSec> <block> [;]
<procHeader> ::= [procedure] [ident] [;]
<subProgramDeclSec> ::= <paramDeclSec> <declSec>
<paramDeclSec> ::= [parameters] <paramDecls>
<paramDecls> ::= <paramDecl> <more_paramDecl>
<more_paramDecl> ::= <paramDecls>
<more_paramDecl> ::= [Lambda]
<paramDecl> ::= <dataType> [ident] [;]
<paramDecl> ::= [var] <dataType> [ident] [;]
<functionDecl> ::= <functionHeader> <subProgramDeclSec> <functionBlock> [;]
<functionHeader> ::= [function] [ident] [returns] <dataType> [end]
<functionBlock> ::= [begin] <statements> <returnStatement> [end]
<statements> ::= <statement> [;] <more_statement>
<more_statement> ::= <statements>
<more_statement> ::= [Lambda]
<statement> ::= [read] [(] <variable> [)]
<statement> ::= [write] <variable>
<statement> ::= [set] <variable> [=] <expression>
<statement> ::= [if] <condition> [then] <statements> <elseClause>
<statement> ::= [while] <condition> [do] <statements> [endwhile]
<statement> ::= [until] <condition> [do] <statements> [enduntil]
<statement> ::= [call] [ident] <argList>
<elseClause> ::= [else] <statements> [endif]
<elseClause> ::= [endif]
<returnStatement> ::= [return] [(] <condition> [)]
<argList> ::= [(] <arguments> [)]
<argList> ::= [Lambda]
<arguments> ::= <argument> <more_argument>
<more_argument> ::= [,] <arguments>
<more_argument> ::= [Lambda]
<condition> ::= <compoundCondition> <more_compoundCondition>
<more_compoundCondition> ::= [\] <condition>
<more_compoundCondition> ::= [Lambda]
<compoundCondition> ::= <simpleCondition> <more_simpleCondition>
<more_simpleCondition> ::= [&] <compoundCondition>
<more_simpleCondition> ::= [Lambda]
<simpleCondition> ::= <expression> <more_expression>
<more_expression> ::= <relOp> <simpleCondition>
<more_expression> ::= [Lambda]
<expression> ::= <term> <more_term>
<more_term> ::= <addOp> <expression>
<more_term> ::= [Lambda]
<addOp> ::= [+]
<addOp> ::= [-]
<term> ::= <unary> <more_unary>
<more_unary> ::= <mulOp> <term>
<more_unary> ::= [Lambda]
<mulOp> ::= [*]
<mulOp> ::= [/]
<unary> ::= [+] <factor>
<unary> ::= [-] <factor>
<factor> ::= <not_factor>
<factor> ::= <factor_continue>
<not_factor> ::= [!] <factor>
<factor_continue> ::= <variable> <argList>
<factor_continue> ::= [numero_int]
<factor_continue> ::= [numero_real]
<factor_continue> ::= ["]
<factor_continue> ::= [(] <condition> [)]
<variable> ::= [ident] <more_variable>
<more_variable> ::= [[] <expression> []]
<more_variable> ::= <more_variable_2>
<more_variable_2> ::= [.] [ident] <more_variable_3>
<more_variable_2> ::= [Lambda]
<more_variable_3> ::= [[] <expression> []] <more_variable_2>
<more_varaible_3> ::= <more_variable_2>
<relOp> ::= [=]
<relOp> ::= [!]
<relOp> ::= [<>]
<relOp> ::= [>]
<relOp> ::= [<]
<relOp> ::= [>=]
<relOp> ::= [<=]
<argument> ::= <condition>